{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DEN%C4%B0Z/OneDrive/Masa%C3%BCst%C3%BC/ComProSearch/frontend/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS;IAAG,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,SAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAG,OAAH,QAAA,SAAA,CAAA,KAAuB;;IACxC,OAAO,IAAA,yKAAO,EAAC,IAAA,gJAAI,EAAC;AACtB","debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DEN%C4%B0Z/OneDrive/Masa%C3%BCst%C3%BC/ComProSearch/frontend/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-slate-900 text-slate-50 hover:bg-slate-900/90\",\r\n        destructive: \"bg-red-500 text-slate-50 hover:bg-red-500/90\",\r\n        outline:\r\n          \"border border-slate-200 bg-white hover:bg-slate-100 hover:text-slate-900\",\r\n        secondary: \"bg-slate-100 text-slate-900 hover:bg-slate-100/80\",\r\n        ghost: \"hover:bg-slate-100 hover:text-slate-900\",\r\n        link: \"text-slate-900 underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, ...props }, ref) => {\r\n    return (\r\n      <button\r\n        className={cn(buttonVariants({ variant, size, className }))}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nButton.displayName = \"Button\";\r\n\r\nexport { Button, buttonVariants };\r\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;;;;;AAEA,MAAM,iBAAiB,IAAA,0KAAG,EACxB,0RACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aAAa;YACb,SACE;YACF,WAAW;YACX,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,2KAAgB,MAC7B,QAAyC;QAAxC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,OAAO;IACrC,qBACE,6LAAC;QACC,WAAW,IAAA,qHAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DEN%C4%B0Z/OneDrive/Masa%C3%BCst%C3%BC/ComProSearch/frontend/lib/supabase.ts"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n// Bayinet ürün tablosu için tip tanımları\r\nexport interface BayinetProduct {\r\n  id: string;\r\n  name: string;\r\n  price?: number;\r\n  category?: string; // Kategori doğrudan ürün tablosunda\r\n  image_url?: string;\r\n  description?: string;\r\n  stock_status?: string;\r\n  // Bayinet'e özgü diğer alanlar\r\n}\r\n\r\n// Denge ürün tablosu için tip tanımları\r\nexport interface DengeProduct {\r\n  id: string;\r\n  product_name: string; // Farklı alan adı\r\n  cost?: number; // Farklı alan adı (price yerine)\r\n  category?: string; // Kategori doğrudan ürün tablosunda\r\n  image?: string; // Farklı alan adı\r\n  details?: string; // Farklı alan adı\r\n  availability?: string; // Farklı alan adı\r\n  // Denge'ye özgü diğer alanlar\r\n}\r\n\r\n// Oksid tabloları için tip tanımları - Gerçek şema\r\nexport interface OksidCategory {\r\n  id: number;\r\n  name: string;\r\n  // Oksid için kategori tablosu şeması henüz belirtilmedi\r\n}\r\n\r\nexport interface OksidProduct {\r\n  id: number; // bigserial\r\n  name: string | null; // text\r\n  url: string | null; // text\r\n  price_1: number | null; // double precision\r\n  price_2: number | null; // double precision\r\n  currency: string | null; // text\r\n  stock: string | null; // text\r\n  category: string | null; // text (kategori adı doğrudan)\r\n  created_at: string | null; // timestamp\r\n}\r\n\r\n// Genel tip tanımları (normalize edilmiş)\r\nexport interface Category {\r\n  id: string;\r\n  name: string;\r\n  store: string;\r\n}\r\n\r\nexport interface Product {\r\n  id: string;\r\n  name: string;\r\n  price?: number;\r\n  category_id?: string;\r\n  store: string;\r\n  image_url?: string;\r\n  description?: string;\r\n  stock_status?: string;\r\n  created_at?: string;\r\n}\r\n\r\n// Tablo isimleri mapping - Sadece ürün tabloları\r\nexport const TABLE_NAMES = {\r\n  bayinet: {\r\n    products: \"bayinet_products\",\r\n  },\r\n  denge: {\r\n    products: \"denge_products\",\r\n  },\r\n  oksid: {\r\n    products: \"oksid_products\", // Gerçek tablo adı\r\n  },\r\n} as const;\r\n\r\nexport type StoreType = keyof typeof TABLE_NAMES;\r\n"],"names":[],"mappings":";;;;;;AAEoB;AAFpB;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,IAAA,0MAAY,EAAC,aAAa;AAiE3C,MAAM,cAAc;IACzB,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,UAAU;IACZ;IACA,OAAO;QACL,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DEN%C4%B0Z/OneDrive/Masa%C3%BCst%C3%BC/ComProSearch/frontend/lib/database.ts"],"sourcesContent":["import {\r\n  supabase,\r\n  Category,\r\n  Product,\r\n  TABLE_NAMES,\r\n  StoreType,\r\n  BayinetProduct,\r\n  DengeProduct,\r\n  OksidProduct,\r\n} from \"./supabase\";\r\n\r\n// Bayinet verilerini normalize et\r\nfunction normalizeBayinetProduct(item: BayinetProduct): Product {\r\n  return {\r\n    id: item.id,\r\n    name: item.name,\r\n    price: item.price,\r\n    category_id: undefined, // Artık category_id yok, category string olarak var\r\n    store: \"bayinet\",\r\n    image_url: item.image_url,\r\n    description: item.description,\r\n    stock_status: item.stock_status,\r\n  };\r\n}\r\n\r\n// Denge verilerini normalize et\r\nfunction normalizeDengeProduct(item: DengeProduct): Product {\r\n  return {\r\n    id: item.id,\r\n    name: item.product_name, // Farklı alan adı\r\n    price: item.cost, // Farklı alan adı\r\n    category_id: undefined, // Artık category_id yok, category string olarak var\r\n    store: \"denge\",\r\n    image_url: item.image, // Farklı alan adı\r\n    description: item.details, // Farklı alan adı\r\n    stock_status: item.availability, // Farklı alan adı\r\n  };\r\n}\r\n\r\n// Oksid verilerini normalize et - Gerçek şema\r\nfunction normalizeOksidProduct(item: OksidProduct): Product {\r\n  return {\r\n    id: item.id.toString(), // number'dan string'e çevir\r\n    name: item.name || \"İsimsiz Ürün\", // null olabilir\r\n    price: item.price_1 || item.price_2 || undefined, // İki fiyat alanından birini kullan\r\n    category_id: undefined, // category string olarak geliyor, id yok\r\n    store: \"oksid\",\r\n    image_url: undefined, // Şemada resim alanı yok\r\n    description: item.url || undefined, // URL'yi açıklama olarak kullan\r\n    stock_status: item.stock || undefined,\r\n    created_at: item.created_at || undefined,\r\n  };\r\n}\r\n\r\n// Kategorileri ürün tablolarından çek - Her mağaza için\r\nexport async function getCategoriesByStore(store: string): Promise<Category[]> {\r\n  try {\r\n    const storeKey = store.toLowerCase() as StoreType;\r\n\r\n    switch (storeKey) {\r\n      case \"bayinet\":\r\n        return await getBayinetCategoriesFromProducts();\r\n      case \"denge\":\r\n        return await getDengeCategoriesFromProducts();\r\n      case \"oksid\":\r\n        return await getOksidCategoriesFromProducts();\r\n      default:\r\n        console.error(`Unknown store: ${store}`);\r\n        return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in getCategoriesByStore:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Bayinet için ürünlerden benzersiz kategori listesi çek\r\nasync function getBayinetCategoriesFromProducts(): Promise<Category[]> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"bayinet_products\")\r\n      .select(\"category\")\r\n      .not(\"category\", \"is\", null)\r\n      .order(\"category\");\r\n\r\n    if (error) {\r\n      console.error(\"Error fetching Bayinet categories from products:\", error);\r\n      return [];\r\n    }\r\n\r\n    if (!data) return [];\r\n\r\n    // Benzersiz kategorileri çıkar ve normalize et\r\n    const uniqueCategories = [...new Set(data.map((item) => item.category))];\r\n\r\n    return uniqueCategories\r\n      .filter((category) => category) // null/undefined'ları filtrele\r\n      .map((category, index) => ({\r\n        id: (index + 1).toString(),\r\n        name: category!,\r\n        store: \"bayinet\",\r\n      }));\r\n  } catch (error) {\r\n    console.error(\"Error in getBayinetCategoriesFromProducts:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Denge için ürünlerden benzersiz kategori listesi çek\r\nasync function getDengeCategoriesFromProducts(): Promise<Category[]> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"denge_products\")\r\n      .select(\"category\")\r\n      .not(\"category\", \"is\", null)\r\n      .order(\"category\");\r\n\r\n    if (error) {\r\n      console.error(\"Error fetching Denge categories from products:\", error);\r\n      return [];\r\n    }\r\n\r\n    if (!data) return [];\r\n\r\n    // Benzersiz kategorileri çıkar ve normalize et\r\n    const uniqueCategories = [...new Set(data.map((item) => item.category))];\r\n\r\n    return uniqueCategories\r\n      .filter((category) => category) // null/undefined'ları filtrele\r\n      .map((category, index) => ({\r\n        id: (index + 1).toString(),\r\n        name: category!,\r\n        store: \"denge\",\r\n      }));\r\n  } catch (error) {\r\n    console.error(\"Error in getDengeCategoriesFromProducts:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Oksid için ürünlerden benzersiz kategori listesi çek\r\nasync function getOksidCategoriesFromProducts(): Promise<Category[]> {\r\n  try {\r\n    // Sayfalama ile tüm kategori verilerini çek\r\n    // İlk önce distinct kategorileri çekelim - bu performansı artırır\r\n    const { data: distinctData, error: distinctError } = await supabase.rpc(\r\n      \"get_distinct_oksid_categories\"\r\n    );\r\n\r\n    // RPC fonksiyonu kullanılabilir değilse (oluşturulmadıysa), tüm verileri çekerek manuel olarak ayrıştıralım\r\n    if (distinctError || !distinctData) {\r\n      console.log(\r\n        \"Distinct RPC fonksiyonu kullanılamıyor, manuel yöntem kullanılıyor...\"\r\n      );\r\n\r\n      // Sayfa sayfa veri çekelim (paginasyon)\r\n      let allCategories: Array<string> = [];\r\n      let hasMoreData = true;\r\n      let offset = 0;\r\n      const pageSize = 1000;\r\n\r\n      while (hasMoreData) {\r\n        const { data: pageData, error: pageError } = await supabase\r\n          .from(\"oksid_products\")\r\n          .select(\"category\")\r\n          .not(\"category\", \"is\", null)\r\n          .range(offset, offset + pageSize - 1);\r\n\r\n        if (pageError) {\r\n          console.error(\r\n            `Error fetching Oksid categories (page ${offset / pageSize + 1}):`,\r\n            pageError\r\n          );\r\n          break;\r\n        }\r\n\r\n        if (!pageData || pageData.length === 0) {\r\n          hasMoreData = false;\r\n          break;\r\n        }\r\n\r\n        // Bu sayfadaki kategorileri ekle\r\n        const pageCategories = pageData.map(\r\n          (item: { category: string }) => item.category\r\n        );\r\n        allCategories = [...allCategories, ...pageCategories];\r\n\r\n        // Sonraki sayfa için offset'i güncelle\r\n        offset += pageSize;\r\n\r\n        // Son sayfaya ulaştıysak döngüden çık\r\n        if (pageData.length < pageSize) {\r\n          hasMoreData = false;\r\n        }\r\n\r\n        console.log(\r\n          `Oksid kategorileri sayfa ${offset / pageSize} yüklendi. ${\r\n            pageData.length\r\n          } ürün, toplam şu ana kadar: ${allCategories.length}`\r\n        );\r\n      }\r\n\r\n      // Benzersiz kategorileri çıkar\r\n      const uniqueCategories = [...new Set(allCategories)]\r\n        .filter((category: string | null | undefined) => category) // null/undefined'ları filtrele\r\n        .sort((a: string, b: string) => {\r\n          // Türkçe karakterleri doğru sıralamak için localeCompare kullan\r\n          return a.localeCompare(b, \"tr-TR\", {\r\n            sensitivity: \"base\",\r\n            numeric: true,\r\n          });\r\n        });\r\n\r\n      console.log(\r\n        `Toplam ${uniqueCategories.length} benzersiz Oksid kategorisi bulundu.`\r\n      );\r\n\r\n      return uniqueCategories.map((category: string, index: number) => ({\r\n        id: (index + 1).toString(),\r\n        name: category,\r\n        store: \"oksid\",\r\n      }));\r\n    } else {\r\n      // RPC fonksiyonu başarıyla çalıştı, benzersiz kategorileri dönelim\r\n      const uniqueCategories = distinctData\r\n        .filter((category: string | null | undefined) => category) // null/undefined'ları filtrele\r\n        .sort((a: string, b: string) => {\r\n          // Türkçe karakterleri doğru sıralamak için localeCompare kullan\r\n          return a.localeCompare(b, \"tr-TR\", {\r\n            sensitivity: \"base\",\r\n            numeric: true,\r\n          });\r\n        });\r\n\r\n      console.log(\r\n        `RPC ile ${uniqueCategories.length} benzersiz Oksid kategorisi bulundu.`\r\n      );\r\n\r\n      return uniqueCategories.map((category: string, index: number) => ({\r\n        id: (index + 1).toString(),\r\n        name: category,\r\n        store: \"oksid\",\r\n      }));\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error in getOksidCategoriesFromProducts:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Ürünleri isme göre ara\r\nexport async function searchProductsByName(\r\n  searchTerm: string,\r\n  store?: string\r\n): Promise<Product[]> {\r\n  try {\r\n    if (!store) {\r\n      // Tüm mağazalarda ara\r\n      const allResults = await Promise.all([\r\n        searchInStore(searchTerm, \"bayinet\"),\r\n        searchInStore(searchTerm, \"denge\"),\r\n        searchInStore(searchTerm, \"oksid\"),\r\n      ]);\r\n      return allResults.flat();\r\n    }\r\n\r\n    return await searchInStore(searchTerm, store.toLowerCase() as StoreType);\r\n  } catch (error) {\r\n    console.error(\"Error in searchProductsByName:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Belirli bir mağazada arama yap\r\nasync function searchInStore(\r\n  searchTerm: string,\r\n  storeKey: StoreType\r\n): Promise<Product[]> {\r\n  try {\r\n    const tableName = TABLE_NAMES[storeKey]?.products;\r\n\r\n    if (!tableName) {\r\n      console.error(`Unknown store: ${storeKey}`);\r\n      return [];\r\n    }\r\n\r\n    // Her mağaza için farklı alan adlarıyla arama yap\r\n    let query;\r\n    switch (storeKey) {\r\n      case \"bayinet\":\r\n        query = supabase\r\n          .from(tableName)\r\n          .select(\"*\")\r\n          .ilike(\"name\", `%${searchTerm}%`)\r\n          .order(\"name\");\r\n        break;\r\n      case \"denge\":\r\n        query = supabase\r\n          .from(tableName)\r\n          .select(\"*\")\r\n          .ilike(\"product_name\", `%${searchTerm}%`)\r\n          .order(\"product_name\");\r\n        break;\r\n      case \"oksid\":\r\n        query = supabase\r\n          .from(tableName)\r\n          .select(\"*\")\r\n          .ilike(\"name\", `%${searchTerm}%`) // Gerçek şemada 'name' alanı var\r\n          .order(\"name\");\r\n        break;\r\n      default:\r\n        return [];\r\n    }\r\n\r\n    const { data, error } = await query;\r\n\r\n    if (error) {\r\n      console.error(`Error searching products in ${storeKey}:`, error);\r\n      return [];\r\n    }\r\n\r\n    if (!data) return [];\r\n\r\n    // Her mağaza için uygun normalize fonksiyonunu kullan\r\n    switch (storeKey) {\r\n      case \"bayinet\":\r\n        return (data as BayinetProduct[]).map(normalizeBayinetProduct);\r\n      case \"denge\":\r\n        return (data as DengeProduct[]).map(normalizeDengeProduct);\r\n      case \"oksid\":\r\n        return (data as OksidProduct[]).map(normalizeOksidProduct);\r\n      default:\r\n        return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error in searchInStore for ${storeKey}:`, error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Ürünleri kategoriye göre getir\r\nexport async function getProductsByCategory(\r\n  categoryId: string,\r\n  store?: string\r\n): Promise<Product[]> {\r\n  try {\r\n    if (!store) {\r\n      // Tüm mağazalarda ara\r\n      const allResults = await Promise.all([\r\n        getProductsByCategoryInStore(categoryId, \"bayinet\"),\r\n        getProductsByCategoryInStore(categoryId, \"denge\"),\r\n        getProductsByCategoryInStore(categoryId, \"oksid\"),\r\n      ]);\r\n      return allResults.flat();\r\n    }\r\n\r\n    return await getProductsByCategoryInStore(\r\n      categoryId,\r\n      store.toLowerCase() as StoreType\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error in getProductsByCategory:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Belirli bir mağazada kategoriye göre ürün getir\r\nasync function getProductsByCategoryInStore(\r\n  categoryId: string,\r\n  storeKey: StoreType\r\n): Promise<Product[]> {\r\n  try {\r\n    const tableName = TABLE_NAMES[storeKey]?.products;\r\n\r\n    if (!tableName) {\r\n      console.error(`Unknown store: ${storeKey}`);\r\n      return [];\r\n    }\r\n\r\n    // Her mağaza için kategori adıyla arama yap\r\n    let query;\r\n    switch (storeKey) {\r\n      case \"bayinet\":\r\n        query = supabase\r\n          .from(tableName)\r\n          .select(\"*\")\r\n          .eq(\"category\", categoryId) // Artık hepsi 'category' alanı kullanıyor\r\n          .order(\"name\");\r\n        break;\r\n      case \"denge\":\r\n        query = supabase\r\n          .from(tableName)\r\n          .select(\"*\")\r\n          .eq(\"category\", categoryId) // Artık hepsi 'category' alanı kullanıyor\r\n          .order(\"product_name\");\r\n        break;\r\n      case \"oksid\":\r\n        query = supabase\r\n          .from(tableName)\r\n          .select(\"*\")\r\n          .eq(\"category\", categoryId) // Gerçek şemada 'category' alanı var\r\n          .order(\"name\");\r\n        break;\r\n      default:\r\n        return [];\r\n    }\r\n\r\n    const { data, error } = await query;\r\n\r\n    if (error) {\r\n      console.error(\r\n        `Error fetching products by category in ${storeKey}:`,\r\n        error\r\n      );\r\n      return [];\r\n    }\r\n\r\n    if (!data) return [];\r\n\r\n    // Her mağaza için uygun normalize fonksiyonunu kullan\r\n    switch (storeKey) {\r\n      case \"bayinet\":\r\n        return (data as BayinetProduct[]).map(normalizeBayinetProduct);\r\n      case \"denge\":\r\n        return (data as DengeProduct[]).map(normalizeDengeProduct);\r\n      case \"oksid\":\r\n        return (data as OksidProduct[]).map(normalizeOksidProduct);\r\n      default:\r\n        return [];\r\n    }\r\n  } catch (error) {\r\n    console.error(\r\n      `Error in getProductsByCategoryInStore for ${storeKey}:`,\r\n      error\r\n    );\r\n    return [];\r\n  }\r\n}\r\n\r\n// Tüm mağazalarda ürün karşılaştırması\r\nexport async function compareProductsAcrossStores(\r\n  searchTerm: string\r\n): Promise<Product[]> {\r\n  try {\r\n    // Tüm mağazalarda paralel arama yap\r\n    const allResults = await Promise.all([\r\n      searchInStore(searchTerm, \"bayinet\"),\r\n      searchInStore(searchTerm, \"denge\"),\r\n      searchInStore(searchTerm, \"oksid\"),\r\n    ]);\r\n\r\n    // Sonuçları birleştir ve fiyata göre sırala\r\n    return allResults.flat().sort((a, b) => {\r\n      // Önce mağazaya göre sırala, sonra fiyata göre\r\n      if (a.store !== b.store) {\r\n        return a.store.localeCompare(b.store);\r\n      }\r\n      return (a.price || 0) - (b.price || 0);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error in compareProductsAcrossStores:\", error);\r\n    return [];\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DEN%C4%B0Z/OneDrive/Masa%C3%BCst%C3%BC/ComProSearch/frontend/app/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  getCategoriesByStore,\r\n  searchProductsByName,\r\n  getProductsByCategory,\r\n  compareProductsAcrossStores,\r\n} from \"@/lib/database\";\r\nimport { Category, Product } from \"@/lib/supabase\";\r\n\r\nexport default function ComproAppUI() {\r\n  const [activeMethod, setActiveMethod] = useState(\"searchByStore\");\r\n  const [selectedStore, setSelectedStore] = useState(\"Bayinet\");\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n\r\n  // Supabase state'leri\r\n  const [categories, setCategories] = useState<Category[]>([]);\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // ✅ Sadece scraper trigger state\r\n  const [scraperStatus, setScraperStatus] = useState<string | null>(null);\r\n\r\n  // Kategorileri yükle\r\n  const loadCategories = async (store: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await getCategoriesByStore(store);\r\n      setCategories(data);\r\n    } catch (err) {\r\n      setError(\"Kategoriler yüklenirken hata oluştu\");\r\n      console.error(\"Error loading categories:\", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadCategories(selectedStore);\r\n  }, [selectedStore]);\r\n\r\n  // Ürün arama fonksiyonu\r\n  const handleSearch = async () => {\r\n    if (!searchTerm.trim()) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      let data: Product[] = [];\r\n      if (activeMethod === \"compare\") {\r\n        data = await compareProductsAcrossStores(searchTerm);\r\n      } else {\r\n        data = await searchProductsByName(searchTerm, selectedStore);\r\n      }\r\n      setProducts(data);\r\n    } catch (err) {\r\n      setError(\"Ürünler aranırken hata oluştu\");\r\n      console.error(\"Error searching products:\", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Kategori seçimi\r\n  const handleCategorySelect = async () => {\r\n    if (!selectedCategory) return;\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      let categoryIdentifier = selectedCategory;\r\n      if (selectedStore.toLowerCase() === \"oksid\") {\r\n        const selectedCat = categories.find(\r\n          (cat) => cat.name === selectedCategory\r\n        );\r\n        categoryIdentifier = selectedCat ? selectedCat.name : selectedCategory;\r\n      }\r\n\r\n      const data = await getProductsByCategory(\r\n        categoryIdentifier,\r\n        selectedStore\r\n      );\r\n      setProducts(data);\r\n    } catch (err) {\r\n      setError(\"Kategori ürünleri yüklenirken hata oluştu\");\r\n      console.error(\"Error loading category products:\", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // ✅ Oksid güncelle butonu (GitHub Actions trigger)\r\n  const handleOksidUpdate = async () => {\r\n    setScraperStatus(\"⏳ Scraper tetikleniyor...\");\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\"/api/run-scraper\", { method: \"POST\" });\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        setScraperStatus(\"🚀 Scraper başlatıldı, Supabase güncellenecek!\");\r\n      } else {\r\n        throw new Error(result.message || \"Scraper tetiklenemedi\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Oksid güncelleme hatası:\", error);\r\n      setError(\"Oksid güncelleme sırasında hata oluştu.\");\r\n      setScraperStatus(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black p-8\">\r\n      <div className=\"max-w-6xl mx-auto\">\r\n        <h1 className=\"text-4xl font-bold text-white mb-8 text-center\">\r\n          ✨ ComPro Ürün Arama\r\n        </h1>\r\n\r\n        {/* Güncelleme Butonları */}\r\n        <div className=\"mb-8 p-6 bg-gray-800/50 backdrop-blur-sm rounded-xl shadow-2xl border border-gray-600\">\r\n          <h2 className=\"text-xl font-semibold text-white mb-4 text-center\">\r\n            🔄 Veritabanı Güncellemeleri\r\n          </h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <Button\r\n              onClick={handleOksidUpdate}\r\n              className=\"bg-orange-600 hover:bg-orange-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors shadow-lg\"\r\n            >\r\n              🔄 Oksid Güncelle\r\n            </Button>\r\n          </div>\r\n\r\n          {/* ✅ Durum mesajı */}\r\n          {scraperStatus && (\r\n            <p className=\"mt-4 text-center text-white\">{scraperStatus}</p>\r\n          )}\r\n          {error && (\r\n            <p className=\"mt-2 text-center text-red-400 font-semibold\">\r\n              {error}\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        {/* 🔍 Arama Alanı (senin mevcut kodun devam edecek) */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}