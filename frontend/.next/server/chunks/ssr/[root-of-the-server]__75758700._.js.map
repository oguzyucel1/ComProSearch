{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///Users/oguz/Desktop/ComProSearch/frontend/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,sKAAO,EAAC,IAAA,6IAAI,EAAC;AACtB","debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":["file:///Users/oguz/Desktop/ComProSearch/frontend/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-slate-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-slate-900 text-slate-50 hover:bg-slate-900/90\",\n        destructive: \"bg-red-500 text-slate-50 hover:bg-red-500/90\",\n        outline:\n          \"border border-slate-200 bg-white hover:bg-slate-100 hover:text-slate-900\",\n        secondary: \"bg-slate-100 text-slate-900 hover:bg-slate-100/80\",\n        ghost: \"hover:bg-slate-100 hover:text-slate-900\",\n        link: \"text-slate-900 underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;;;;;AAEA,MAAM,iBAAiB,IAAA,uKAAG,EACxB,0RACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aAAa;YACb,SACE;YACF,WAAW;YACX,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,mNAAgB,CAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IACvC,qBACE,8OAAC;QACC,WAAW,IAAA,kHAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///Users/oguz/Desktop/ComProSearch/frontend/lib/supabase.ts"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\n// Bayinet ürün tablosu için tip tanımları\nexport interface BayinetProduct {\n  id: string;\n  name: string;\n  price?: number;\n  category?: string; // Kategori doğrudan ürün tablosunda\n  image_url?: string;\n  description?: string;\n  stock_status?: string;\n  // Bayinet'e özgü diğer alanlar\n}\n\n// Denge ürün tablosu için tip tanımları\nexport interface DengeProduct {\n  id: string;\n  product_name: string; // Farklı alan adı\n  cost?: number; // Farklı alan adı (price yerine)\n  category?: string; // Kategori doğrudan ürün tablosunda\n  image?: string; // Farklı alan adı\n  details?: string; // Farklı alan adı\n  availability?: string; // Farklı alan adı\n  // Denge'ye özgü diğer alanlar\n}\n\n// Oksid tabloları için tip tanımları - Gerçek şema\nexport interface OksidCategory {\n  id: number;\n  name: string;\n  // Oksid için kategori tablosu şeması henüz belirtilmedi\n}\n\nexport interface OksidProduct {\n  id: number; // bigserial\n  name: string | null; // text\n  url: string | null; // text\n  price_1: number | null; // double precision\n  price_2: number | null; // double precision\n  currency: string | null; // text\n  stock: string | null; // text\n  category: string | null; // text (kategori adı doğrudan)\n  created_at: string | null; // timestamp\n}\n\n// Genel tip tanımları (normalize edilmiş)\nexport interface Category {\n  id: string;\n  name: string;\n  store: string;\n}\n\nexport interface Product {\n  id: string;\n  name: string;\n  price?: number;\n  category_id?: string;\n  store: string;\n  image_url?: string;\n  description?: string;\n  stock_status?: string;\n  created_at?: string;\n}\n\n// Tablo isimleri mapping - Sadece ürün tabloları\nexport const TABLE_NAMES = {\n  bayinet: {\n    products: \"bayinet_products\",\n  },\n  denge: {\n    products: \"denge_products\",\n  },\n  oksid: {\n    products: \"oksid_products\", // Gerçek tablo adı\n  },\n} as const;\n\nexport type StoreType = keyof typeof TABLE_NAMES;\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,IAAA,uMAAY,EAAC,aAAa;AAiE3C,MAAM,cAAc;IACzB,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,UAAU;IACZ;IACA,OAAO;QACL,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["file:///Users/oguz/Desktop/ComProSearch/frontend/lib/database.ts"],"sourcesContent":["import {\n  supabase,\n  Category,\n  Product,\n  TABLE_NAMES,\n  StoreType,\n  BayinetProduct,\n  DengeProduct,\n  OksidProduct,\n} from \"./supabase\";\n\n// Bayinet verilerini normalize et\nfunction normalizeBayinetProduct(item: BayinetProduct): Product {\n  return {\n    id: item.id,\n    name: item.name,\n    price: item.price,\n    category_id: undefined, // Artık category_id yok, category string olarak var\n    store: \"bayinet\",\n    image_url: item.image_url,\n    description: item.description,\n    stock_status: item.stock_status,\n  };\n}\n\n// Denge verilerini normalize et\nfunction normalizeDengeProduct(item: DengeProduct): Product {\n  return {\n    id: item.id,\n    name: item.product_name, // Farklı alan adı\n    price: item.cost, // Farklı alan adı\n    category_id: undefined, // Artık category_id yok, category string olarak var\n    store: \"denge\",\n    image_url: item.image, // Farklı alan adı\n    description: item.details, // Farklı alan adı\n    stock_status: item.availability, // Farklı alan adı\n  };\n}\n\n// Oksid verilerini normalize et - Gerçek şema\nfunction normalizeOksidProduct(item: OksidProduct): Product {\n  return {\n    id: item.id.toString(), // number'dan string'e çevir\n    name: item.name || \"İsimsiz Ürün\", // null olabilir\n    price: item.price_1 || item.price_2 || undefined, // İki fiyat alanından birini kullan\n    category_id: undefined, // category string olarak geliyor, id yok\n    store: \"oksid\",\n    image_url: undefined, // Şemada resim alanı yok\n    description: item.url || undefined, // URL'yi açıklama olarak kullan\n    stock_status: item.stock || undefined,\n    created_at: item.created_at || undefined,\n  };\n}\n\n// Kategorileri ürün tablolarından çek - Her mağaza için\nexport async function getCategoriesByStore(store: string): Promise<Category[]> {\n  try {\n    const storeKey = store.toLowerCase() as StoreType;\n\n    switch (storeKey) {\n      case \"bayinet\":\n        return await getBayinetCategoriesFromProducts();\n      case \"denge\":\n        return await getDengeCategoriesFromProducts();\n      case \"oksid\":\n        return await getOksidCategoriesFromProducts();\n      default:\n        console.error(`Unknown store: ${store}`);\n        return [];\n    }\n  } catch (error) {\n    console.error(\"Error in getCategoriesByStore:\", error);\n    return [];\n  }\n}\n\n// Bayinet için ürünlerden benzersiz kategori listesi çek\nasync function getBayinetCategoriesFromProducts(): Promise<Category[]> {\n  try {\n    const { data, error } = await supabase\n      .from(\"bayinet_products\")\n      .select(\"category\")\n      .not(\"category\", \"is\", null)\n      .order(\"category\");\n\n    if (error) {\n      console.error(\"Error fetching Bayinet categories from products:\", error);\n      return [];\n    }\n\n    if (!data) return [];\n\n    // Benzersiz kategorileri çıkar ve normalize et\n    const uniqueCategories = [...new Set(data.map((item) => item.category))];\n\n    return uniqueCategories\n      .filter((category) => category) // null/undefined'ları filtrele\n      .map((category, index) => ({\n        id: (index + 1).toString(),\n        name: category!,\n        store: \"bayinet\",\n      }));\n  } catch (error) {\n    console.error(\"Error in getBayinetCategoriesFromProducts:\", error);\n    return [];\n  }\n}\n\n// Denge için ürünlerden benzersiz kategori listesi çek\nasync function getDengeCategoriesFromProducts(): Promise<Category[]> {\n  try {\n    const { data, error } = await supabase\n      .from(\"denge_products\")\n      .select(\"category\")\n      .not(\"category\", \"is\", null)\n      .order(\"category\");\n\n    if (error) {\n      console.error(\"Error fetching Denge categories from products:\", error);\n      return [];\n    }\n\n    if (!data) return [];\n\n    // Benzersiz kategorileri çıkar ve normalize et\n    const uniqueCategories = [...new Set(data.map((item) => item.category))];\n\n    return uniqueCategories\n      .filter((category) => category) // null/undefined'ları filtrele\n      .map((category, index) => ({\n        id: (index + 1).toString(),\n        name: category!,\n        store: \"denge\",\n      }));\n  } catch (error) {\n    console.error(\"Error in getDengeCategoriesFromProducts:\", error);\n    return [];\n  }\n}\n\n// Oksid için ürünlerden benzersiz kategori listesi çek\nasync function getOksidCategoriesFromProducts(): Promise<Category[]> {\n  try {\n    // Sayfalama ile tüm kategori verilerini çek\n    // İlk önce distinct kategorileri çekelim - bu performansı artırır\n    const { data: distinctData, error: distinctError } = await supabase.rpc(\n      \"get_distinct_oksid_categories\"\n    );\n\n    // RPC fonksiyonu kullanılabilir değilse (oluşturulmadıysa), tüm verileri çekerek manuel olarak ayrıştıralım\n    if (distinctError || !distinctData) {\n      console.log(\n        \"Distinct RPC fonksiyonu kullanılamıyor, manuel yöntem kullanılıyor...\"\n      );\n\n      // Sayfa sayfa veri çekelim (paginasyon)\n      let allCategories: Array<string> = [];\n      let hasMoreData = true;\n      let offset = 0;\n      const pageSize = 1000;\n\n      while (hasMoreData) {\n        const { data: pageData, error: pageError } = await supabase\n          .from(\"oksid_products\")\n          .select(\"category\")\n          .not(\"category\", \"is\", null)\n          .range(offset, offset + pageSize - 1);\n\n        if (pageError) {\n          console.error(\n            `Error fetching Oksid categories (page ${offset / pageSize + 1}):`,\n            pageError\n          );\n          break;\n        }\n\n        if (!pageData || pageData.length === 0) {\n          hasMoreData = false;\n          break;\n        }\n\n        // Bu sayfadaki kategorileri ekle\n        const pageCategories = pageData.map(\n          (item: { category: string }) => item.category\n        );\n        allCategories = [...allCategories, ...pageCategories];\n\n        // Sonraki sayfa için offset'i güncelle\n        offset += pageSize;\n\n        // Son sayfaya ulaştıysak döngüden çık\n        if (pageData.length < pageSize) {\n          hasMoreData = false;\n        }\n\n        console.log(\n          `Oksid kategorileri sayfa ${offset / pageSize} yüklendi. ${\n            pageData.length\n          } ürün, toplam şu ana kadar: ${allCategories.length}`\n        );\n      }\n\n      // Benzersiz kategorileri çıkar\n      const uniqueCategories = [...new Set(allCategories)]\n        .filter((category: string | null | undefined) => category) // null/undefined'ları filtrele\n        .sort((a: string, b: string) => {\n          // Türkçe karakterleri doğru sıralamak için localeCompare kullan\n          return a.localeCompare(b, \"tr-TR\", {\n            sensitivity: \"base\",\n            numeric: true,\n          });\n        });\n\n      console.log(\n        `Toplam ${uniqueCategories.length} benzersiz Oksid kategorisi bulundu.`\n      );\n\n      return uniqueCategories.map((category: string, index: number) => ({\n        id: (index + 1).toString(),\n        name: category,\n        store: \"oksid\",\n      }));\n    } else {\n      // RPC fonksiyonu başarıyla çalıştı, benzersiz kategorileri dönelim\n      const uniqueCategories = distinctData\n        .filter((category: string | null | undefined) => category) // null/undefined'ları filtrele\n        .sort((a: string, b: string) => {\n          // Türkçe karakterleri doğru sıralamak için localeCompare kullan\n          return a.localeCompare(b, \"tr-TR\", {\n            sensitivity: \"base\",\n            numeric: true,\n          });\n        });\n\n      console.log(\n        `RPC ile ${uniqueCategories.length} benzersiz Oksid kategorisi bulundu.`\n      );\n\n      return uniqueCategories.map((category: string, index: number) => ({\n        id: (index + 1).toString(),\n        name: category,\n        store: \"oksid\",\n      }));\n    }\n  } catch (error) {\n    console.error(\"Error in getOksidCategoriesFromProducts:\", error);\n    return [];\n  }\n}\n\n// Ürünleri isme göre ara\nexport async function searchProductsByName(\n  searchTerm: string,\n  store?: string\n): Promise<Product[]> {\n  try {\n    if (!store) {\n      // Tüm mağazalarda ara\n      const allResults = await Promise.all([\n        searchInStore(searchTerm, \"bayinet\"),\n        searchInStore(searchTerm, \"denge\"),\n        searchInStore(searchTerm, \"oksid\"),\n      ]);\n      return allResults.flat();\n    }\n\n    return await searchInStore(searchTerm, store.toLowerCase() as StoreType);\n  } catch (error) {\n    console.error(\"Error in searchProductsByName:\", error);\n    return [];\n  }\n}\n\n// Belirli bir mağazada arama yap\nasync function searchInStore(\n  searchTerm: string,\n  storeKey: StoreType\n): Promise<Product[]> {\n  try {\n    const tableName = TABLE_NAMES[storeKey]?.products;\n\n    if (!tableName) {\n      console.error(`Unknown store: ${storeKey}`);\n      return [];\n    }\n\n    // Her mağaza için farklı alan adlarıyla arama yap\n    let query;\n    switch (storeKey) {\n      case \"bayinet\":\n        query = supabase\n          .from(tableName)\n          .select(\"*\")\n          .ilike(\"name\", `%${searchTerm}%`)\n          .order(\"name\");\n        break;\n      case \"denge\":\n        query = supabase\n          .from(tableName)\n          .select(\"*\")\n          .ilike(\"product_name\", `%${searchTerm}%`)\n          .order(\"product_name\");\n        break;\n      case \"oksid\":\n        query = supabase\n          .from(tableName)\n          .select(\"*\")\n          .ilike(\"name\", `%${searchTerm}%`) // Gerçek şemada 'name' alanı var\n          .order(\"name\");\n        break;\n      default:\n        return [];\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error(`Error searching products in ${storeKey}:`, error);\n      return [];\n    }\n\n    if (!data) return [];\n\n    // Her mağaza için uygun normalize fonksiyonunu kullan\n    switch (storeKey) {\n      case \"bayinet\":\n        return (data as BayinetProduct[]).map(normalizeBayinetProduct);\n      case \"denge\":\n        return (data as DengeProduct[]).map(normalizeDengeProduct);\n      case \"oksid\":\n        return (data as OksidProduct[]).map(normalizeOksidProduct);\n      default:\n        return [];\n    }\n  } catch (error) {\n    console.error(`Error in searchInStore for ${storeKey}:`, error);\n    return [];\n  }\n}\n\n// Ürünleri kategoriye göre getir\nexport async function getProductsByCategory(\n  categoryId: string,\n  store?: string\n): Promise<Product[]> {\n  try {\n    if (!store) {\n      // Tüm mağazalarda ara\n      const allResults = await Promise.all([\n        getProductsByCategoryInStore(categoryId, \"bayinet\"),\n        getProductsByCategoryInStore(categoryId, \"denge\"),\n        getProductsByCategoryInStore(categoryId, \"oksid\"),\n      ]);\n      return allResults.flat();\n    }\n\n    return await getProductsByCategoryInStore(\n      categoryId,\n      store.toLowerCase() as StoreType\n    );\n  } catch (error) {\n    console.error(\"Error in getProductsByCategory:\", error);\n    return [];\n  }\n}\n\n// Belirli bir mağazada kategoriye göre ürün getir\nasync function getProductsByCategoryInStore(\n  categoryId: string,\n  storeKey: StoreType\n): Promise<Product[]> {\n  try {\n    const tableName = TABLE_NAMES[storeKey]?.products;\n\n    if (!tableName) {\n      console.error(`Unknown store: ${storeKey}`);\n      return [];\n    }\n\n    // Her mağaza için kategori adıyla arama yap\n    let query;\n    switch (storeKey) {\n      case \"bayinet\":\n        query = supabase\n          .from(tableName)\n          .select(\"*\")\n          .eq(\"category\", categoryId) // Artık hepsi 'category' alanı kullanıyor\n          .order(\"name\");\n        break;\n      case \"denge\":\n        query = supabase\n          .from(tableName)\n          .select(\"*\")\n          .eq(\"category\", categoryId) // Artık hepsi 'category' alanı kullanıyor\n          .order(\"product_name\");\n        break;\n      case \"oksid\":\n        query = supabase\n          .from(tableName)\n          .select(\"*\")\n          .eq(\"category\", categoryId) // Gerçek şemada 'category' alanı var\n          .order(\"name\");\n        break;\n      default:\n        return [];\n    }\n\n    const { data, error } = await query;\n\n    if (error) {\n      console.error(\n        `Error fetching products by category in ${storeKey}:`,\n        error\n      );\n      return [];\n    }\n\n    if (!data) return [];\n\n    // Her mağaza için uygun normalize fonksiyonunu kullan\n    switch (storeKey) {\n      case \"bayinet\":\n        return (data as BayinetProduct[]).map(normalizeBayinetProduct);\n      case \"denge\":\n        return (data as DengeProduct[]).map(normalizeDengeProduct);\n      case \"oksid\":\n        return (data as OksidProduct[]).map(normalizeOksidProduct);\n      default:\n        return [];\n    }\n  } catch (error) {\n    console.error(\n      `Error in getProductsByCategoryInStore for ${storeKey}:`,\n      error\n    );\n    return [];\n  }\n}\n\n// Tüm mağazalarda ürün karşılaştırması\nexport async function compareProductsAcrossStores(\n  searchTerm: string\n): Promise<Product[]> {\n  try {\n    // Tüm mağazalarda paralel arama yap\n    const allResults = await Promise.all([\n      searchInStore(searchTerm, \"bayinet\"),\n      searchInStore(searchTerm, \"denge\"),\n      searchInStore(searchTerm, \"oksid\"),\n    ]);\n\n    // Sonuçları birleştir ve fiyata göre sırala\n    return allResults.flat().sort((a, b) => {\n      // Önce mağazaya göre sırala, sonra fiyata göre\n      if (a.store !== b.store) {\n        return a.store.localeCompare(b.store);\n      }\n      return (a.price || 0) - (b.price || 0);\n    });\n  } catch (error) {\n    console.error(\"Error in compareProductsAcrossStores:\", error);\n    return [];\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 493, "column": 0}, "map": {"version":3,"sources":["file:///Users/oguz/Desktop/ComProSearch/frontend/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  getCategoriesByStore,\n  searchProductsByName,\n  getProductsByCategory,\n  compareProductsAcrossStores,\n} from \"@/lib/database\";\nimport { Category, Product } from \"@/lib/supabase\";\n\nexport default function ComproAppUI() {\n  const [activeMethod, setActiveMethod] = useState(\"searchByStore\");\n  const [selectedStore, setSelectedStore] = useState(\"Bayinet\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n\n  // Supabase state'leri\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [products, setProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // ✅ Sadece scraper trigger state\n  const [scraperStatus, setScraperStatus] = useState<string | null>(null);\n\n  // Kategorileri yükle\n  const loadCategories = async (store: string) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await getCategoriesByStore(store);\n      setCategories(data);\n    } catch (err) {\n      setError(\"Kategoriler yüklenirken hata oluştu\");\n      console.error(\"Error loading categories:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadCategories(selectedStore);\n  }, [selectedStore]);\n\n  // Ürün arama fonksiyonu\n  const handleSearch = async () => {\n    if (!searchTerm.trim()) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      let data: Product[] = [];\n      if (activeMethod === \"compare\") {\n        data = await compareProductsAcrossStores(searchTerm);\n      } else {\n        data = await searchProductsByName(searchTerm, selectedStore);\n      }\n      setProducts(data);\n    } catch (err) {\n      setError(\"Ürünler aranırken hata oluştu\");\n      console.error(\"Error searching products:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Kategori seçimi\n  const handleCategorySelect = async () => {\n    if (!selectedCategory) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      let categoryIdentifier = selectedCategory;\n      if (selectedStore.toLowerCase() === \"oksid\") {\n        const selectedCat = categories.find(\n          (cat) => cat.name === selectedCategory\n        );\n        categoryIdentifier = selectedCat ? selectedCat.name : selectedCategory;\n      }\n\n      const data = await getProductsByCategory(\n        categoryIdentifier,\n        selectedStore\n      );\n      setProducts(data);\n    } catch (err) {\n      setError(\"Kategori ürünleri yüklenirken hata oluştu\");\n      console.error(\"Error loading category products:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ✅ Oksid güncelle butonu (GitHub Actions trigger)\n  const handleOksidUpdate = async () => {\n    setScraperStatus(\"⏳ Scraper tetikleniyor...\");\n    setError(null);\n    try {\n      const response = await fetch(\"/api/run-scraper\", { method: \"POST\" });\n      const result = await response.json();\n\n      if (response.ok) {\n        setScraperStatus(\"🚀 Scraper başlatıldı, Supabase güncellenecek!\");\n      } else {\n        throw new Error(result.message || \"Scraper tetiklenemedi\");\n      }\n    } catch (error) {\n      console.error(\"Oksid güncelleme hatası:\", error);\n      setError(\"Oksid güncelleme sırasında hata oluştu.\");\n      setScraperStatus(null);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black p-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <h1 className=\"text-4xl font-bold text-white mb-8 text-center\">\n          ✨ ComPro Ürün Arama\n        </h1>\n\n        {/* Güncelleme Butonları */}\n        <div className=\"mb-8 p-6 bg-gray-800/50 backdrop-blur-sm rounded-xl shadow-2xl border border-gray-600\">\n          <h2 className=\"text-xl font-semibold text-white mb-4 text-center\">\n            🔄 Veritabanı Güncellemeleri\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button\n              onClick={handleOksidUpdate}\n              className=\"bg-orange-600 hover:bg-orange-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors shadow-lg\"\n            >\n              🔄 Oksid Güncelle\n            </Button>\n          </div>\n\n          {/* ✅ Durum mesajı */}\n          {scraperStatus && (\n            <p className=\"mt-4 text-center text-white\">{scraperStatus}</p>\n          )}\n          {error && (\n            <p className=\"mt-2 text-center text-red-400 font-semibold\">\n              {error}\n            </p>\n          )}\n        </div>\n\n        {/* 🔍 Arama Alanı (senin mevcut kodun devam edecek) */}\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}