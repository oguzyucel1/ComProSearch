{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/oguz/Desktop/ComProSearch/frontend/app/api/start-job/route.ts"],"sourcesContent":["import { createClient } from \"@supabase/supabase-js\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n);\n\nexport async function POST(req: Request) {\n  try {\n    const { marketplace } = await req.json();\n\n    // 1. Job tablosuna kaydet\n    const { data: job, error } = await supabase\n      .from(\"jobs\")\n      .insert({ marketplace, status: \"pending\" })\n      .select()\n      .single();\n\n    if (error || !job) {\n      return new Response(\n        JSON.stringify({ error: \"Supabase insert hatası\", details: error }),\n        { status: 500 }\n      );\n    }\n\n    // 2. GitHub Actions workflow tetikle\n    const ghRes = await fetch(\n      `https://api.github.com/repos/${process.env.GH_REPO}/actions/workflows/oksid.yml/dispatches`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${process.env.GH_TOKEN}`,\n          Accept: \"application/vnd.github+json\",\n        },\n        body: JSON.stringify({\n          ref: \"main\",\n          inputs: {\n            marketplace, // ✅ string değer\n            job_id: job.id, // ✅ Supabase’den gelen id\n          },\n        }),\n      }\n    );\n\n    if (!ghRes.ok) {\n      const details = await ghRes.text();\n      return new Response(\n        JSON.stringify({\n          error: \"GitHub Actions tetiklenemedi\",\n          details,\n        }),\n        { status: 500 }\n      );\n    }\n\n    // 3. Başarılı dönüş\n    return new Response(JSON.stringify({ success: true, job }), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (err: any) {\n    return new Response(\n      JSON.stringify({ error: \"Beklenmeyen hata\", details: err.message }),\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,WAAW,IAAA,yMAAY;AAKtB,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,IAAI;QAEtC,0BAA0B;QAC1B,MAAM,EAAE,MAAM,GAAG,EAAE,KAAK,EAAE,GAAG,MAAM,SAChC,IAAI,CAAC,QACL,MAAM,CAAC;YAAE;YAAa,QAAQ;QAAU,GACxC,MAAM,GACN,MAAM;QAET,IAAI,SAAS,CAAC,KAAK;YACjB,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBAAE,OAAO;gBAA0B,SAAS;YAAM,IACjE;gBAAE,QAAQ;YAAI;QAElB;QAEA,qCAAqC;QACrC,MAAM,QAAQ,MAAM,MAClB,CAAC,6BAA6B,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,uCAAuC,CAAC,EAC5F;YACE,QAAQ;YACR,SAAS;gBACP,eAAe,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,QAAQ,EAAE;gBAC/C,QAAQ;YACV;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,KAAK;gBACL,QAAQ;oBACN;oBACA,QAAQ,IAAI,EAAE;gBAChB;YACF;QACF;QAGF,IAAI,CAAC,MAAM,EAAE,EAAE;YACb,MAAM,UAAU,MAAM,MAAM,IAAI;YAChC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,OAAO;gBACP;YACF,IACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAM;QAAI,IAAI;YAC1D,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,KAAU;QACjB,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;YAAoB,SAAS,IAAI,OAAO;QAAC,IACjE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}