{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DEN%C4%B0Z/OneDrive/Masa%C3%BCst%C3%BC/ComProSearch/frontend/app/api/run-scraper/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\n\r\nexport async function POST() {\r\n  try {\r\n    const ghRes = await fetch(\r\n      \"https://api.github.com/repos/oguzyucel1/ComProSearch/actions/workflows/oksid.yml/dispatches\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${process.env.GH_TOKEN}`, // âœ… Token envâ€™den\r\n          Accept: \"application/vnd.github.v3+json\",\r\n        },\r\n        body: JSON.stringify({\r\n          ref: \"main\", // âœ… branch adÄ±nÄ± buraya yaz (main / master / dev)\r\n        }),\r\n      }\r\n    );\r\n\r\n    if (!ghRes.ok) {\r\n      const text = await ghRes.text();\r\n      return NextResponse.json({ message: text }, { status: ghRes.status });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      message: \"ðŸš€ Scraper workflow triggered, Supabase gÃ¼ncellenecek!\",\r\n    });\r\n  } catch (err: any) {\r\n    return NextResponse.json({ message: err.message }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,MAClB,+FACA;YACE,QAAQ;YACR,SAAS;gBACP,eAAe,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,QAAQ,EAAE;gBAC/C,QAAQ;YACV;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,KAAK;YACP;QACF;QAGF,IAAI,CAAC,MAAM,EAAE,EAAE;YACb,MAAM,OAAO,MAAM,MAAM,IAAI;YAC7B,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAK,GAAG;gBAAE,QAAQ,MAAM,MAAM;YAAC;QACrE;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;QACX;IACF,EAAE,OAAO,KAAU;QACjB,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,SAAS,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF","debugId":null}}]
}